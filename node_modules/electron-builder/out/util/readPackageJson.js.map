{
  "version": 3,
  "file": "readPackageJson.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/readPackageJson.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;oEAaO,AAAK,WAA0B,AAAY;AAChD,cAAM,AAAI,OAAG,MAAM,AAAQ,8CAAC,AAAI,AAAC;AACjC,cAAM,AAAO,QAAC,AAAI,MAAE,AAAI,AAAC;AACzB,AAAa,sBAAC,AAAI,AAAC;AACnB,AAAM,eAAC,AAAI,AACb;AAAC;;;;;;;;qEAED,AAAK,WAAkB,AAAY,MAAE,AAAS;AAC5C,AAAE,AAAC,YAAC,AAAI,KAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AAC9B,AAAM,AACR;AAAC;AAED,YAAI,AAAU;AACd,YAAI,AAAC;AACH,AAAU,yBAAG,MAAM,AAAQ,8CAAC,AAAI,MAAC,AAAO,QAAC,AAAI,MAAC,AAAO,QAAC,AAAI,AAAC,OAAE,AAAS,AAAC,YAAE,AAAM,AAAC,AAClF;AAAC,UACD,AAAK,AAAC,OAAC,AAAO,AAAC,SAAC,AAAC;AACf,AAAM,AACR;AAAC;AAED,AAAI,aAAC,AAAY,0BACd,AAAK,MAAC,AAAQ,AAAC,UACf,AAAG;AAAC,AAAE,mBAAI,AAAE,GAAC,AAAO,QAAC,AAAU,YAAE,AAAE,AAAC,IAAC,AAAI,AAAE,AAAC,AACjD;SAHsB,AAAU;AAG/B;;;;;;;;qEASM,AAAK,WAAuB,AAAkB,YAAE,AAAkB;AACvE,cAAM,AAAM,SAAG,AAAQ,2CAAC,MAAM,AAAQ,8CAAC,AAAU,YAAE,AAAM,AAAC,AAAC;AAC3D,cAAM,AAAY,eAAG,AAAI,MAAC,AAAQ,SAAC,AAAU,YAAE,AAAU,AAAC;AAC1D,AAAG,AAAC,gDAAS,AAAY,aAAC,AAAU,WAAC,AAAI,AAAC,QAAG,AAAU,aAAG,AAAY,YAAqB,AAAC;AAC5F,AAAM,eAAC,AAAM,AACf;AAAC,AAED,AAAM;;;;;;;;qEAAC,AAAK,WAAqB,AAAkB;AACjD,AAAG,AAAC,aAAC,MAAM,AAAU,cAAI,CAAC,AAAsB,wBAAE,AAAuB,yBAAE,AAAwB,AAAC,AAAC,2BAAC,AAAC;AACrG,gBAAI,AAAC;AACH,AAAM,uBAAC,MAAM,AAAY,aAAC,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAU,AAAC,aAAE,AAAU,AAAC,AAC1E;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,0BAAM,AAAC,AACT;AAAC,AACH;AAAC,AACH;AAAC;AAED,YAAI,AAAC;AACH,AAAM,mBAAC,AAAwB,0BAAC,MAAM,AAAe,gBAAC,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAc,AAAC,AAAC,AAAC,AAC/F;AAAC,UACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,sBAAM,AAAC,AACT;AAAC;AAED,gBAAI,AAAC;AACH,sBAAM,AAAI,OAAG,MAAM,AAAY,0CAAC,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAU,AAAC,aAAE,AAAc,AAAC;AAClF,AAAE,AAAC,oBAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAM,2BAAC,AAAwB,yBAAC,AAAI,AAAC,AACvC;AAAC,AACH;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,0BAAM,AAAC,AACT;AAAC,AACH;AAAC;AAED,kBAAM,IAAI,AAAK,AAAC,yCAAmC,AAAU,UAAE,AAAC,AAClE;AAAC,AACH;AAAC,AAED,AAAM;;;;;;;;qEAAC,AAAK,WAA6B,AAAiC,QAAE,AAAkB,YAAE,AAA4B;AAC1H,AAAqF;AACrF,AAAE,AAAC,YAAC,AAAM,UAAI,AAAI,QAAI,AAAM,OAAC,AAAe,mBAAI,AAAI,AAAC,MAAC,AAAC;AACrD,AAAM,mBAAC,AAAM,OAAC,AAAe,AAC/B;AAAC;AAED,AAAkG;AAClG,AAAE,AAAC,YAAC,AAAe,mBAAI,AAAI,AAAC,MAAC,AAAC;AAC5B,AAAG,AAAC,iBAAC,MAAM,AAAI,QAAI,CAAC,AAAU,YAAE,AAAmB,qBAAE,AAA2B,AAAC,AAAC,8BAAC,AAAC;AAClF,oBAAI,AAAC;AACH,AAAM,2BAAC,CAAC,MAAM,AAAQ,8CAAC,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAc,gBAAE,AAAI,MAAE,AAAc,AAAC,AAAC,AAAC,kBAAC,AAAO,AAC9F;AAAC,kBACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,wBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,AAAI,AAAC,6FAAqC,AAAI,sBAAkB,AAAC,EAAC,AAAO,OAAE,AAAC,AAC9E;AAAC,AACH;AAAC,AACH;AAAC,AACH;AAAC;AAED,cAAM,AAAe,kBAAG,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAc,AAAC;AAC7D,cAAM,AAAmB,sBAAG,AAAwB,yBAAC,AAAe,oBAAI,MAAM,AAAQ,8CAAC,AAAe,AAAC,AAAC;AACxG,AAAE,AAAC,YAAC,AAAmB,uBAAI,AAAI,AAAC,MAAC,AAAC;AAChC,kBAAM,IAAI,AAAK,AAAC,yEAAmE,AAAe,eAAG,AAAC,AACxG;AAAC;AAED,cAAM,AAAS,YAAG,AAAmB,oBAAC,AAAC,AAAC;AACxC,AAAM,eAAC,AAAS,cAAK,AAAG,OAAI,AAAS,cAAK,AAAG,MAAG,AAAmB,oBAAC,AAAS,UAAC,AAAC,AAAC,KAAG,AAAmB,AACxG;AAAC;;;;;;;;qEAmBD,AAAK;AACH,cAAM,AAAG,MAAG,AAAI,AAAG,kCAAC,EAAC,AAAS,WAAE,AAAI,AAAC,AAAC;AACtC,AAAG,YAAC,AAAa,cAAC,AAAO,QAAC,AAAwC,AAAC,AAAC;AACpE,AAAO,gBAAC,AAAc,AAAC,gBAAC,AAAG,KAAE,CAAC,AAAQ,AAAC,AAAC;AACxC,cAAM,AAAM,SAAG,MAAM,AAAQ,8CAAC,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAI,MAAE,AAAI,MAAE,AAAa,AAAC,AAAC;AAC9E,AAAM,eAAC,AAAG,IAAC,AAAO,QAAC,AAAM,AAAC,AAC5B;AAAC,AAED,AAAM;;;;;;;;qEAAC,AAAK,WAAyB,AAAc;AACjD,AAAE,AAAC,YAAC,AAAgB,oBAAI,AAAI,AAAC,MAAC,AAAC;AAC7B,AAAgB,+BAAG,AAAqB,AAAE,AAC5C;AAAC;AAED,cAAM,AAAS,YAAG,MAAM,AAAgB;AACxC,AAAE,AAAC,YAAC,CAAC,AAAS,UAAC,AAAM,AAAC,AAAC,SAAC,AAAC;AACvB,kBAAM,IAAI,AAAK,MAAC,AAAsB,yBAAG,AAAI,KAAC,AAAS,UAAC,AAAsB,uBAAC,AAAS,UAAC,AAAO,AAAC,SAAE,AAAI,MAAE,AAAC,AAAC,KAAG,AAA6B,gCAAG,AAAI,KAAC,AAAS,UAAC,AAAS,UAAC,AAAM,QAAE,AAAI,MAAE,AAAC,AAAC,AAAC,AAC1L;AAAC,AACH;AAAC;;;;;;;;;AAxJD,AAAO,AAAG,AAAM,AAAK;;;;;;AACrB,AAAO,AAAE,AAAG,AAAE,AAAI,AAAE,AAAM,AAA+B;;;;;;AACzD,AAAO,AAAE,AAAQ,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AAC/C,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAS;;;;AAClC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAY,AAAE,AAAM,AAAS;;;;;;;;AAMtC,MAAM,AAAa,gBAAG,AAAO,QAAC,AAAwB,AAAC,AAEvD,AAAM;;AAyBN,kCAAkC,AAAa;AAC7C,AAAE,AAAC,QAAC,AAAQ,SAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACjC,cAAM,IAAI,AAAK,AAAC,MAAwE,AAAC,AAC3F;AAAC;AACD,AAAM,WAAC,AAAQ,SAAC,AAAK,AACvB;AAAC,AAED,AAAM;;AAyEN,kCAAkC,AAAgB;AAChD,AAAG,AAAC,SAAC,MAAM,AAAI,QAAI,CAAC,AAAU,YAAE,AAAmB,qBAAE,AAA2B,AAAC,AAAC,8BAAC,AAAC;AAClF,cAAM,AAAe,kBAAG,AAAW,YAAC,AAAe;AACnD,YAAI,AAAG,MAAG,AAAe,mBAAI,AAAI,OAAG,AAAI,OAAG,AAAe,gBAAC,AAAI,AAAC;AAChE,AAAE,AAAC,YAAC,AAAG,OAAI,AAAI,AAAC,MAAC,AAAC;AAChB,kBAAM,AAAY,eAAG,AAAW,YAAC,AAAY;AAC7C,AAAG,kBAAG,AAAY,gBAAI,AAAI,OAAG,AAAI,OAAG,AAAY,aAAC,AAAI,AAAC,AACxD;AAAC;AACD,AAAE,AAAC,YAAC,AAAG,OAAI,AAAI,AAAC,MAAC,AAAC;AAChB,AAAM,mBAAC,AAAG,AACZ;AAAC,AACH;AAAC;AACD,AAAM,WAAC,AAAI,AACb;AAAC;AAED,IAAI,AAAgB,mBAAwB,AAAI;;AAqBhD,gCAAgC,AAA0B;AACxD,UAAM,AAAM,SAAQ,AAAM,OAAC,AAAM,OAAC,AAAI,AAAC;AACvC,AAAG,AAAC,SAAC,MAAM,AAAC,KAAI,AAAM,AAAC,QAAC,AAAC;AACvB,AAAE,AAAC,YAAC,AAAC,EAAC,AAAO,YAAK,AAAM,UAAiB,AAAC,EAAC,AAAO,OAAC,AAAI,SAAK,AAAM,AAAC,QAAC,AAAC;AACnE,AAAqD;AACrD,AAAQ,AACV;AAAC;AAED,cAAM,AAAQ,WAAG,AAAC,EAAC,AAAQ,SAAC,AAAM,WAAK,AAAC,IAAG,AAAE,KAAG,AAAC,EAAC,AAAQ,SAAC,AAAS,UAAC,AAAC,AAAC,GAAC,AAAK,MAAC,AAAG,AAAC;AAClF,AAAE,AAAC,YAAC,AAAC,EAAC,AAAO,YAAK,AAAsB,AAAC,wBAAC,AAAC;AACzC,AAAQ,qBAAC,AAAI,KAA8B,AAAC,EAAC,AAAO,OAAC,AAAkB,AAAC,AAC1E;AAAC;AAED,YAAI,AAAC,IAAG,AAAM;AACd,YAAI,AAAQ,WAAkB,AAAI;AAClC,AAAG,AAAC,aAAC,MAAM,AAAC,KAAI,AAAQ,AAAC,UAAC,AAAC;AACzB,AAAE,AAAC,gBAAC,AAAC,MAAK,AAAQ,SAAC,AAAQ,SAAC,AAAM,SAAG,AAAC,AAAC,AAAC,IAAC,AAAC;AACxC,AAAQ,2BAAG,AAAC;AACZ,AAAK,AACP;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAE,AAAC,oBAAC,AAAC,EAAC,AAAC,AAAC,MAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAC,sBAAC,AAAC,AAAC,KAAG,AAAM,OAAC,AAAM,OAAC,AAAI,AAAC,AAC5B;AAAC,AACD,AAAI,uBAAC,AAAE,AAAC,IAAC,OAAO,AAAC,EAAC,AAAC,AAAC,OAAK,AAAQ,AAAC,UAAC,AAAC;AAClC,AAAC,sBAAC,AAAC,AAAC,KAAG,CAAC,AAAC,EAAC,AAAC,AAAC,AAAC,AACf;AAAC;AACD,AAAC,oBAAG,AAAC,EAAC,AAAC,AAAC,AACV;AAAC,AACH;AAAC;AAED,AAAE,AAAC,YAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,AAAQ,uBAAG,AAAS,AACtB;AAAC;AAED,YAAI,AAAO,UAAG,AAAC,EAAC,AAAQ,QAAC,AAAW,AAAE,cAAC,AAAC,AAAC,KAAG,AAAC,EAAC,AAAQ,QAAC,AAAS,UAAC,AAAC,AAAC;AACnE,AAAM,AAAC,gBAAC,AAAC,EAAC,AAAO,AAAC,AAAC,AAAC;AAClB,iBAAK,AAAsB;AACzB,AAAO,0BAAG,AAAgB;AAC1B,AAAK;AAEP,iBAAK,AAAU;AACb,AAAO,0BAAG,AAAiB;AAC3B,AAAK;AAEP,iBAAK,AAAO;AACV,AAAO,0BAAG,AAAuB;AACjC,AAAK,AACT,AAAC;;AAED,AAAE,AAAC,YAAC,AAAC,EAAC,AAAQ,AAAC,aAAI,AAAI,QAAI,CAAC,AAAK,MAAC,AAAO,QAAC,AAAC,EAAC,AAAQ,AAAC,AAAC,AAAC,YAAC,AAAC;AACvD,AAAC,cAAC,AAAQ,AAAC,YAAG,CAAC,AAAC,EAAC,AAAQ,AAAC,AAAC,AAC7B;AAAC;AAED,AAAE,AAAC,YAAC,AAAK,MAAC,AAAO,QAAC,AAAC,EAAC,AAAQ,AAAC,AAAC,AAAC,YAAC,AAAC;AAC/B,AAAC,cAAC,AAAQ,AAAC,UAAC,AAAI,KAAC,AAAO,AAAC,AAC3B;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAC,cAAC,AAAQ,AAAC,YAAG,AAAO,AACvB;AAAC,AACH;AAAC;AACD,AAAM,WAAC,AAAM,AACf;AAAC",
  "sourcesContent": [
    "import Ajv from \"ajv\"\nimport { log, warn } from \"electron-builder-util/out/log\"\nimport { readFile, readJson } from \"fs-extra-p\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { readAsarJson } from \"../asar\"\nimport { Config } from \"../metadata\"\nimport AdditionalPropertiesParams = ajv.AdditionalPropertiesParams\nimport ErrorObject = ajv.ErrorObject\nimport TypeParams = ajv.TypeParams\n\nconst normalizeData = require(\"normalize-package-data\")\n\nexport async function readPackageJson(file: string): Promise<any> {\n  const data = await readJson(file)\n  await authors(file, data)\n  normalizeData(data)\n  return data\n}\n\nasync function authors(file: string, data: any) {\n  if (data.contributors != null) {\n    return\n  }\n\n  let authorData\n  try {\n    authorData = await readFile(path.resolve(path.dirname(file), \"AUTHORS\"), \"utf8\")\n  }\n  catch (ignored) {\n    return\n  }\n\n  data.contributors = authorData\n    .split(/\\r?\\n/g)\n    .map(it => it.replace(/^\\s*#.*$/, \"\").trim())\n}\n\nfunction getConfigFromPackageData(metadata: any) {\n  if (metadata.directories != null) {\n    throw new Error(`\"directories\" in the root is deprecated, please specify in the \"build\"`)\n  }\n  return metadata.build\n}\n\nexport async function doLoadConfig(configFile: string, projectDir: string) {\n  const result = safeLoad(await readFile(configFile, \"utf8\"))\n  const relativePath = path.relative(projectDir, configFile)\n  log(`Using ${relativePath.startsWith(\"..\") ? configFile : relativePath} configuration file`)\n  return result\n}\n\nexport async function loadConfig(projectDir: string): Promise<Config | null> {\n  for (const configFile of [\"electron-builder.yml\", \"electron-builder.json\", \"electron-builder.json5\"]) {\n    try {\n      return await doLoadConfig(path.join(projectDir, configFile), projectDir)\n    }\n    catch (e) {\n      if (e.code !== \"ENOENT\") {\n        throw e\n      }\n    }\n  }\n\n  try {\n    return getConfigFromPackageData(await readPackageJson(path.join(projectDir, \"package.json\")))\n  }\n  catch (e) {\n    if (e.code !== \"ENOENT\") {\n      throw e\n    }\n\n    try {\n      const data = await readAsarJson(path.join(projectDir, \"app.asar\"), \"package.json\")\n      if (data != null) {\n        return getConfigFromPackageData(data)\n      }\n    }\n    catch (e) {\n      if (e.code !== \"ENOENT\") {\n        throw e\n      }\n    }\n\n    throw new Error(`Cannot find package.json in the ${projectDir}`)\n  }\n}\n\nexport async function getElectronVersion(config: Config | null | undefined, projectDir: string, projectMetadata?: any | null): Promise<string> {\n  // build is required, but this check is performed later, so, we should check for null\n  if (config != null && config.electronVersion != null) {\n    return config.electronVersion\n  }\n\n  // projectMetadata passed only for prepacked app asar and in this case no dev deps in the app.asar\n  if (projectMetadata == null) {\n    for (const name of [\"electron\", \"electron-prebuilt\", \"electron-prebuilt-compile\"]) {\n      try {\n        return (await readJson(path.join(projectDir, \"node_modules\", name, \"package.json\"))).version\n      }\n      catch (e) {\n        if (e.code !== \"ENOENT\") {\n          warn(`Cannot read electron version from ${name} package.json: ${e.message}`)\n        }\n      }\n    }\n  }\n\n  const packageJsonPath = path.join(projectDir, \"package.json\")\n  const electronPrebuiltDep = findFromElectronPrebuilt(projectMetadata || await readJson(packageJsonPath))\n  if (electronPrebuiltDep == null) {\n    throw new Error(`Cannot find electron dependency to get electron version in the '${packageJsonPath}'`)\n  }\n\n  const firstChar = electronPrebuiltDep[0]\n  return firstChar === \"^\" || firstChar === \"~\" ? electronPrebuiltDep.substring(1) : electronPrebuiltDep\n}\n\nfunction findFromElectronPrebuilt(packageData: any): any {\n  for (const name of [\"electron\", \"electron-prebuilt\", \"electron-prebuilt-compile\"]) {\n    const devDependencies = packageData.devDependencies\n    let dep = devDependencies == null ? null : devDependencies[name]\n    if (dep == null) {\n      const dependencies = packageData.dependencies\n      dep = dependencies == null ? null : dependencies[name]\n    }\n    if (dep != null) {\n      return dep\n    }\n  }\n  return null\n}\n\nlet validatorPromise: Promise<any> | null = null\n\nasync function createConfigValidator() {\n  const ajv = new Ajv({allErrors: true})\n  ajv.addMetaSchema(require(\"ajv/lib/refs/json-schema-draft-04.json\"))\n  require(\"ajv-keywords\")(ajv, [\"typeof\"])\n  const schema = await readJson(path.join(__dirname, \"..\", \"..\", \"scheme.json\"))\n  return ajv.compile(schema)\n}\n\nexport async function validateConfig(config: Config) {\n  if (validatorPromise == null) {\n    validatorPromise = createConfigValidator()\n  }\n\n  const validator = await validatorPromise\n  if (!validator(config)) {\n    throw new Error(\"Config is invalid:\\n\" + JSON.stringify(normaliseErrorMessages(validator.errors!), null, 2) + \"\\n\\nRaw validation errors: \" + JSON.stringify(validator.errors, null, 2))\n  }\n}\n\nfunction normaliseErrorMessages(errors: Array<ErrorObject>) {\n  const result: any = Object.create(null)\n  for (const e of errors) {\n    if (e.keyword === \"type\" && (<TypeParams>e.params).type === \"null\") {\n      // ignore - no sense to report that type accepts null\n      continue\n    }\n\n    const dataPath = e.dataPath.length === 0 ? [] : e.dataPath.substring(1).split(\".\")\n    if (e.keyword === \"additionalProperties\") {\n      dataPath.push((<AdditionalPropertiesParams>e.params).additionalProperty)\n    }\n\n    let o = result\n    let lastName: string | null = null\n    for (const p of dataPath) {\n      if (p === dataPath[dataPath.length - 1]) {\n        lastName = p\n        break\n      }\n      else {\n        if (o[p] == null) {\n          o[p] = Object.create(null)\n        }\n        else if (typeof o[p] === \"string\") {\n          o[p] = [o[p]]\n        }\n        o = o[p]\n      }\n    }\n\n    if (lastName == null) {\n      lastName = \"unknown\"\n    }\n\n    let message = e.message!.toUpperCase()[0] + e.message!.substring(1)\n    switch (e.keyword) {\n      case \"additionalProperties\":\n        message = \"Unknown option\"\n        break\n\n      case \"required\":\n        message = \"Required option\"\n        break\n\n      case \"anyOf\":\n        message = \"Invalid option object\"\n        break\n    }\n\n    if (o[lastName] != null && !Array.isArray(o[lastName])) {\n      o[lastName] = [o[lastName]]\n    }\n\n    if (Array.isArray(o[lastName])) {\n      o[lastName].push(message)\n    }\n    else {\n      o[lastName] = message\n    }\n  }\n  return result\n}"
  ]
}
