{
  "version": 3,
  "file": "winPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/winPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import BluebirdPromise from \"bluebird-lst\"\nimport { DIR_TARGET, Platform, Target } from \"electron-builder-core\"\nimport { asArray, exec, Lazy, use } from \"electron-builder-util\"\nimport { log } from \"electron-builder-util/out/log\"\nimport { close, open, read, readFile, rename } from \"fs-extra-p\"\nimport * as forge from \"node-forge\"\nimport * as path from \"path\"\nimport { downloadCertificate } from \"./codeSign\"\nimport { WinBuildOptions } from \"./options/winOptions\"\nimport { BuildInfo } from \"./packagerApi\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport AppXTarget from \"./targets/appx\"\nimport NsisTarget from \"./targets/nsis\"\nimport { createCommonTarget } from \"./targets/targetFactory\"\nimport { FileCodeSigningInfo, getSignVendorPath, sign, SignOptions } from \"./windowsCodeSign\"\n\nexport class WinPackager extends PlatformPackager<WinBuildOptions> {\n  readonly cscInfo = new Lazy<FileCodeSigningInfo | null>(() => {\n    const platformSpecificBuildOptions = this.platformSpecificBuildOptions\n    const subjectName = platformSpecificBuildOptions.certificateSubjectName\n    if (subjectName != null) {\n      return BluebirdPromise.resolve({subjectName})\n    }\n\n    const certificateSha1 = platformSpecificBuildOptions.certificateSha1\n    if (certificateSha1 != null) {\n      return BluebirdPromise.resolve({certificateSha1})\n    }\n\n    const certificateFile = platformSpecificBuildOptions.certificateFile\n    if (certificateFile != null) {\n      const certificatePassword = this.getCscPassword()\n      return BluebirdPromise.resolve({\n        file: certificateFile,\n        password: certificatePassword == null ? null : certificatePassword.trim(),\n      })\n    }\n    else {\n      const cscLink = process.env.WIN_CSC_LINK || this.packagerOptions.cscLink\n      if (cscLink != null) {\n        return downloadCertificate(cscLink, this.info.tempDirManager)\n          .then(path => {\n            return {\n              file: path,\n              password: this.getCscPassword(),\n            }\n          })\n      }\n      else {\n        return BluebirdPromise.resolve(null)\n      }\n    }\n  })\n\n  private iconPath: Promise<string> | null\n\n  readonly computedPublisherName = new Lazy<Array<string> | null>(async () => {\n    let publisherName = (<WinBuildOptions>this.platformSpecificBuildOptions).publisherName\n    if (publisherName === null) {\n      return null\n    }\n\n    const cscInfo = await this.cscInfo.value\n    if (cscInfo == null) {\n      return null\n    }\n\n    if (publisherName == null && cscInfo.file != null) {\n      try {\n        // https://github.com/digitalbazaar/forge/issues/338#issuecomment-164831585\n        const p12Asn1 = forge.asn1.fromDer(await readFile(cscInfo.file, \"binary\"), false)\n        const p12 = (<any>forge).pkcs12.pkcs12FromAsn1(p12Asn1, false, cscInfo.password)\n        const bagType = (<any>forge.pki.oids).certBag\n        publisherName = p12.getBags({bagType: bagType})[bagType][0].cert.subject.getField(\"CN\").value\n      }\n      catch (e) {\n        throw new Error(`Cannot extract publisher name from code signing certificate, please file issue. As workaround, set win.publisherName: ${e.stack || e}`)\n      }\n    }\n\n    return publisherName == null ? null : asArray(publisherName)\n  })\n\n  constructor(info: BuildInfo) {\n    super(info)\n  }\n\n  get defaultTarget(): Array<string> {\n    return [\"nsis\"]\n  }\n\n  protected doGetCscPassword(): string {\n    return this.platformSpecificBuildOptions.certificatePassword || process.env.WIN_CSC_KEY_PASSWORD || super.doGetCscPassword()\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void, cleanupTasks: Array<() => Promise<any>>): void {\n    for (const name of targets) {\n      if (name === DIR_TARGET) {\n        continue\n      }\n\n      const targetClass: typeof NsisTarget | typeof AppXTarget | null = (() => {\n        switch (name) {\n          case \"nsis\":\n          case \"portable\":\n            return require(\"./targets/nsis\").default\n          case \"nsis-web\":\n            return require(\"./targets/WebInstaller\").default\n\n          case \"squirrel\":\n            try {\n              return require(\"electron-builder-squirrel-windows\").default\n            }\n            catch (e) {\n              throw new Error(`Module electron-builder-squirrel-windows must be installed in addition to build Squirrel.Windows: ${e.stack || e}`)\n            }\n\n          case \"appx\":\n            return require(\"./targets/appx\").default\n\n          default:\n            return null\n        }\n      })()\n\n      mapper(name, outDir => targetClass === null ? createCommonTarget(name, outDir, this) : new (<any>targetClass)(this, outDir, name))\n    }\n  }\n\n  get platform() {\n    return Platform.WINDOWS\n  }\n\n  getIconPath() {\n    if (this.iconPath == null) {\n      this.iconPath = this.getValidIconPath()\n    }\n    return this.iconPath\n  }\n\n  private async getValidIconPath(): Promise<string | null> {\n    let iconPath = this.platformSpecificBuildOptions.icon || this.config.icon\n    if (iconPath != null && !iconPath.endsWith(\".ico\")) {\n      iconPath += \".ico\"\n    }\n\n    iconPath = iconPath == null ? await this.getDefaultIcon(\"ico\") : path.resolve(this.projectDir, iconPath)\n    if (iconPath == null) {\n      return null\n    }\n\n    await checkIcon(iconPath)\n    return iconPath\n  }\n\n  async sign(file: string, logMessagePrefix?: string) {\n    const cscInfo = await this.cscInfo.value\n    if (cscInfo == null) {\n      if (this.forceCodeSigning) {\n        throw new Error(`App is not signed and \"forceCodeSigning\" is set to true, please ensure that code signing configuration is correct, please see https://github.com/electron-userland/electron-builder/wiki/Code-Signing`)\n      }\n\n      return\n    }\n\n    const certFile = cscInfo.file\n\n    if (logMessagePrefix == null) {\n      logMessagePrefix = `Signing ${path.basename(file)}`\n    }\n    if (certFile == null) {\n      if (cscInfo.subjectName == null) {\n        log(`${logMessagePrefix} (certificate SHA1: \"${cscInfo.certificateSha1}\")`)\n      }\n      else {\n        log(`${logMessagePrefix} (certificate subject name: \"${cscInfo.subjectName}\")`)\n      }\n    }\n    else {\n      log(`${logMessagePrefix} (certificate file: \"${certFile}\")`)\n    }\n\n    await this.doSign({\n      path: file,\n\n      cert: certFile,\n\n      password: cscInfo.password,\n      name: this.appInfo.productName,\n      site: await this.appInfo.computePackageUrl(),\n      options: Object.assign({}, this.platformSpecificBuildOptions, {\n        certificateSubjectName: cscInfo.subjectName,\n        certificateSha1: cscInfo.certificateSha1,\n      }),\n    })\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected doSign(options: SignOptions): Promise<any> {\n    return sign(options)\n  }\n\n  async signAndEditResources(file: string) {\n    const appInfo = this.appInfo\n\n    const args = [\n      file,\n      \"--set-version-string\", \"CompanyName\", appInfo.companyName,\n      \"--set-version-string\", \"FileDescription\", appInfo.productName,\n      \"--set-version-string\", \"ProductName\", appInfo.productName,\n      \"--set-version-string\", \"InternalName\", path.basename(appInfo.productFilename, \".exe\"),\n      \"--set-version-string\", \"LegalCopyright\", appInfo.copyright,\n      \"--set-version-string\", \"OriginalFilename\", \"\",\n      \"--set-file-version\", appInfo.buildVersion,\n      \"--set-product-version\", appInfo.versionInWeirdWindowsForm,\n    ]\n\n    use(this.platformSpecificBuildOptions.legalTrademarks, it => args.push(\"--set-version-string\", \"LegalTrademarks\", it!))\n    use(await this.getIconPath(), it => args.push(\"--set-icon\", it))\n\n    const rceditExecutable = path.join(await getSignVendorPath(), \"rcedit.exe\")\n    const isWin = process.platform === \"win32\"\n    if (!isWin) {\n      args.unshift(rceditExecutable)\n    }\n    await exec(isWin ? rceditExecutable : \"wine\", args)\n\n    await this.sign(file)\n  }\n\n  protected async postInitApp(appOutDir: string) {\n    const executable = path.join(appOutDir, `${this.appInfo.productFilename}.exe`)\n    await rename(path.join(appOutDir, `${this.electronDistExecutableName}.exe`), executable)\n    await this.signAndEditResources(executable)\n  }\n}\n\nasync function checkIcon(file: string): Promise<void> {\n  const fd = await open(file, \"r\")\n  const buffer = new Buffer(512)\n  try {\n    await read(fd, buffer, 0, buffer.length, 0)\n  }\n  finally {\n    await close(fd)\n  }\n\n  if (!isIco(buffer)) {\n    throw new Error(`Windows icon is not valid ico file, please fix \"${file}\"`)\n  }\n\n  const sizes = parseIco(buffer)\n  for (const size of sizes) {\n    if (size!.w >= 256 && size!.h >= 256) {\n      return\n    }\n  }\n\n  throw new Error(`Windows icon size must be at least 256x256, please fix \"${file}\"`)\n}\n\ninterface Size {\n  w: number\n  h: number\n}\n\nfunction parseIco(buffer: Buffer): Array<Size> {\n  if (!isIco(buffer)) {\n    throw new Error(\"buffer is not ico\")\n  }\n\n  const n = buffer.readUInt16LE(4)\n  const result = new Array<Size>(n)\n  for (let i = 0; i < n; i++) {\n    result[i] = {\n      w: buffer.readUInt8(6 + i * 16) || 256,\n      h: buffer.readUInt8(7 + i * 16) || 256,\n    }\n  }\n  return result\n}\n\nfunction isIco(buffer: Buffer): boolean {\n  return buffer.readUInt16LE(0) === 0 && buffer.readUInt16LE(2) === 1\n}"
  ]
}
