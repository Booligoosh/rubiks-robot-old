{
  "version": 3,
  "file": "archive.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/archive.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { path7za } from \"7zip-bin\"\nimport { CompressionLevel } from \"electron-builder-core\"\nimport { debug7zArgs, spawn } from \"electron-builder-util\"\nimport { exists } from \"electron-builder-util/out/fs\"\nimport { unlink } from \"fs-extra-p\"\nimport * as path from \"path\"\n\nclass CompressionDescriptor {\n  constructor(public flag: string, public env: string, public minLevel: string, public maxLevel: string = \"-9\") {\n  }\n}\n\nconst extToCompressionDescriptor: { [key: string]: CompressionDescriptor; } = {\n  \"tar.xz\": new CompressionDescriptor(\"--xz\", \"XZ_OPT\", \"-0\", \"-9e\"),\n  \"tar.lz\": new CompressionDescriptor(\"--lzip\", \"LZOP\", \"-0\"),\n  \"tar.gz\": new CompressionDescriptor(\"--gz\", \"GZIP\", \"-1\"),\n  \"tar.bz2\": new CompressionDescriptor(\"--bzip2\", \"BZIP2\", \"-1\"),\n}\n\nexport async function tar(compression: CompressionLevel | n, format: string, outFile: string, dirToArchive: string, isMacApp: boolean = false) {\n  // we don't use 7z here - develar: I spent a lot of time making pipe working - but it works on MacOS and often hangs on Linux (even if use pipe-io lib)\n  // and in any case it is better to use system tools (in the light of docker - it is not problem for user because we provide complete docker image).\n  const info = extToCompressionDescriptor[format]\n  let tarEnv = process.env\n  if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {\n    tarEnv = Object.assign({}, process.env)\n    tarEnv[info.env] = \"-\" + process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL\n  }\n  else if (compression != null && compression !== \"normal\") {\n    tarEnv = Object.assign({}, process.env)\n    tarEnv[info.env] = compression === \"store\" ? info.minLevel : info.maxLevel\n  }\n\n  const args = [info.flag, \"-cf\", outFile]\n  if (!isMacApp) {\n    args.push(\"--transform\", `s,^\\.,${path.basename(outFile, \".\" + format)},`)\n  }\n  args.push(isMacApp ? path.basename(dirToArchive) : \".\")\n  await spawn(process.platform === \"darwin\" || process.platform === \"freebsd\" ? \"gtar\" : \"tar\", args, {\n    cwd: isMacApp ? path.dirname(dirToArchive) : dirToArchive,\n    env: tarEnv\n  })\n  return outFile\n}\n\nexport async function archive(compression: CompressionLevel | n, format: string, outFile: string, dirToArchive: string, withoutDir: boolean = false): Promise<string> {\n  let storeOnly = compression === \"store\"\n  const args = debug7zArgs(\"a\")\n  if (format === \"7z\" || format.endsWith(\".7z\")) {\n    if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {\n      storeOnly = false\n      args.push(`-mx=${process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL}`)\n    }\n    else if (!storeOnly) {\n      // 7z is very fast, so, use ultra compression\n      args.push(\"-mx=9\", \"-mfb=64\", \"-md=64m\", \"-ms=on\")\n    }\n  }\n  else if (format === \"zip\" && compression === \"maximum\") {\n    // http://superuser.com/a/742034\n    args.push(\"-mfb=258\", \"-mpass=15\")\n  }\n  else if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {\n    storeOnly = false\n    args.push(`-mx=${process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL}`)\n  }\n  else if (!storeOnly) {\n    args.push(\"-mx=9\")\n  }\n\n  // remove file before - 7z doesn't overwrite file, but update\n  try {\n    await unlink(outFile)\n  }\n  catch (e) {\n    // ignore\n  }\n\n  if (format === \"zip\" || storeOnly) {\n    args.push(\"-mm=\" + (storeOnly ? \"Copy\" : \"Deflate\"))\n  }\n\n  args.push(outFile, withoutDir ? \".\" : path.basename(dirToArchive))\n\n  try {\n    await spawn(path7za, args, {\n      cwd: withoutDir ? dirToArchive : path.dirname(dirToArchive),\n    })\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\" && !(await exists(dirToArchive))) {\n      throw new Error(`Cannot create archive: \"${dirToArchive}\" doesn't exist`)\n    }\n    else {\n      throw e\n    }\n  }\n\n  return outFile\n}"
  ]
}
