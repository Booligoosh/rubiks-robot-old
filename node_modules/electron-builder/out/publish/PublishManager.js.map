{
  "version": 3,
  "file": "PublishManager.js",
  "sourceRoot": "",
  "sources": [
    "../../src/publish/PublishManager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import BluebirdPromise from \"bluebird-lst\"\nimport { createHash } from \"crypto\"\nimport { Arch, Platform, PlatformSpecificBuildOptions, Target } from \"electron-builder-core\"\nimport { CancellationToken } from \"electron-builder-http/out/CancellationToken\"\nimport { BintrayOptions, GenericServerOptions, GithubOptions, githubUrl, PublishConfiguration, PublishProvider, S3Options, s3Url, UpdateInfo, VersionInfo } from \"electron-builder-http/out/publishOptions\"\nimport { asArray, debug, isEmptyOrSpaces, isPullRequest, safeStringifyJson } from \"electron-builder-util\"\nimport { log, warn } from \"electron-builder-util/out/log\"\nimport { throwError } from \"electron-builder-util/out/promise\"\nimport { HttpPublisher, PublishContext, Publisher, PublishOptions } from \"electron-publish\"\nimport { BintrayPublisher } from \"electron-publish/out/BintrayPublisher\"\nimport { GitHubPublisher } from \"electron-publish/out/gitHubPublisher\"\nimport { MultiProgress } from \"electron-publish/out/multiProgress\"\nimport { createReadStream, ensureDir, outputJson, writeFile } from \"fs-extra-p\"\nimport isCi from \"is-ci\"\nimport { safeDump } from \"js-yaml\"\nimport * as path from \"path\"\nimport * as url from \"url\"\nimport { Packager } from \"../packager\"\nimport { ArtifactCreated, BuildInfo } from \"../packagerApi\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { WinPackager } from \"../winPackager\"\n\nexport class PublishManager implements PublishContext {\n  private readonly nameToPublisher = new Map<string, Publisher | null>()\n\n  readonly publishTasks: Array<Promise<any>> = []\n  private readonly errors: Array<Error> = []\n\n  private isPublish = false\n\n  readonly progress = (<NodeJS.WritableStream>process.stdout).isTTY ? new MultiProgress() : null\n\n  constructor(packager: Packager, private readonly publishOptions: PublishOptions, readonly cancellationToken: CancellationToken) {\n    if (!isPullRequest()) {\n      if (publishOptions.publish === undefined) {\n        if (process.env.npm_lifecycle_event === \"release\") {\n          publishOptions.publish = \"always\"\n        }\n        else {\n          const tag = getCiTag()\n          if (tag != null) {\n            log(`Tag ${tag} is defined, so artifacts will be published`)\n            publishOptions.publish = \"onTag\"\n          }\n          else if (isCi) {\n            log(\"CI detected, so artifacts will be published if draft release exists\")\n            publishOptions.publish = \"onTagOrDraft\"\n          }\n        }\n      }\n\n      if (publishOptions.publish != null && publishOptions.publish !== \"never\") {\n        this.isPublish = publishOptions.publish !== \"onTag\" || getCiTag() != null\n      }\n    }\n    else if (publishOptions.publish !== \"never\") {\n      log(\"Current build is a part of pull request, publishing will be skipped\")\n    }\n\n    packager.addAfterPackHandler(async event => {\n      const packager = event.packager\n      if (event.electronPlatformName === \"darwin\") {\n        if (!event.targets.some(it => it.name === \"zip\")) {\n          return\n        }\n      }\n      else if (packager.platform === Platform.WINDOWS) {\n        if (!event.targets.some(it => isSuitableWindowsTarget(it))) {\n          return\n        }\n      }\n      else {\n        return\n      }\n\n      const publishConfigs = await getPublishConfigsForUpdateInfo(packager, await getPublishConfigs(packager, null, event.arch), event.arch)\n      if (publishConfigs == null || publishConfigs.length === 0) {\n        return\n      }\n\n      let publishConfig = publishConfigs[0]\n\n      if (packager.platform === Platform.WINDOWS) {\n        const publisherName = await (<WinPackager>packager).computedPublisherName.value\n        if (publisherName != null) {\n          publishConfig = Object.assign({publisherName: publisherName}, publishConfig)\n        }\n      }\n\n      await writeFile(path.join(packager.getResourcesDir(event.appOutDir), \"app-update.yml\"), safeDump(publishConfig))\n    })\n\n    packager.artifactCreated(event => this.addTask(this.artifactCreated(event)))\n  }\n\n  private async artifactCreated(event: ArtifactCreated) {\n    const packager = event.packager\n    const target = event.target\n    const publishConfigs = event.publishConfig == null ? await getPublishConfigs(packager, target == null ? null : target.options, event.arch) : [event.publishConfig]\n\n    const eventFile = event.file\n    if (publishConfigs == null) {\n      if (this.isPublish) {\n        debug(`${eventFile} is not published: no publish configs`)\n      }\n      return\n    }\n\n    if (this.isPublish) {\n      for (const publishConfig of publishConfigs) {\n        if (this.cancellationToken.cancelled) {\n          break\n        }\n\n        const publisher = this.getOrCreatePublisher(publishConfig, packager.info)\n        if (publisher != null) {\n          if (eventFile == null) {\n            this.addTask((<HttpPublisher>publisher).uploadData(event.data!, event.safeArtifactName!))\n          }\n          else {\n            this.addTask(publisher.upload(eventFile!, event.safeArtifactName))\n          }\n        }\n      }\n    }\n\n    if (target != null && eventFile != null && !this.cancellationToken.cancelled) {\n      if ((packager.platform === Platform.MAC && target.name === \"zip\") ||\n        (packager.platform === Platform.WINDOWS && isSuitableWindowsTarget(target) && eventFile.endsWith(\".exe\"))) {\n        this.addTask(writeUpdateInfo(event, publishConfigs))\n      }\n    }\n  }\n\n  private addTask(promise: Promise<any>) {\n    if (this.cancellationToken.cancelled) {\n      return\n    }\n\n    this.publishTasks.push(promise\n      .catch(it => this.errors.push(it)))\n  }\n\n  getOrCreatePublisher(publishConfig: PublishConfiguration, buildInfo: BuildInfo): Publisher | null {\n    let publisher = this.nameToPublisher.get(publishConfig.provider)\n    if (publisher == null) {\n      publisher = createPublisher(this, buildInfo.metadata.version!, publishConfig, this.publishOptions)\n      this.nameToPublisher.set(publishConfig.provider, publisher)\n      log(`Publishing to ${publisher}`)\n    }\n    return publisher\n  }\n\n  cancelTasks() {\n    for (const task of this.publishTasks) {\n      if (\"cancel\" in task) {\n        (<any>task).cancel()\n      }\n    }\n    this.publishTasks.length = 0\n    this.nameToPublisher.clear()\n  }\n\n  async awaitTasks() {\n    if (this.errors.length > 0) {\n      this.cancelTasks()\n      throwError(this.errors)\n      return\n    }\n\n    const publishTasks = this.publishTasks\n    let list = publishTasks.slice()\n    publishTasks.length = 0\n    while (list.length > 0) {\n      await BluebirdPromise.all(list)\n      if (publishTasks.length === 0) {\n        break\n      }\n      else {\n        list = publishTasks.slice()\n        publishTasks.length = 0\n      }\n    }\n  }\n}\n\nexport async function getPublishConfigsForUpdateInfo(packager: PlatformPackager<any>, publishConfigs: Array<PublishConfiguration> | null, arch: Arch | null): Promise<Array<PublishConfiguration> | null> {\n  if (publishConfigs === null) {\n    return null\n  }\n\n  if (publishConfigs.length === 0) {\n    debug(\"No publishConfigs, detect using repository info\")\n    // https://github.com/electron-userland/electron-builder/issues/925#issuecomment-261732378\n    // default publish config is github, file should be generated regardless of publish state (user can test installer locally or manage the release process manually)\n    const repositoryInfo = await packager.info.repositoryInfo\n    if (repositoryInfo != null && repositoryInfo.type === \"github\") {\n      const resolvedPublishConfig = await getResolvedPublishConfig(packager, {provider: repositoryInfo.type}, arch, false)\n      if (resolvedPublishConfig != null) {\n        return [resolvedPublishConfig]\n      }\n    }\n  }\n  return publishConfigs\n}\n\nasync function writeUpdateInfo(event: ArtifactCreated, _publishConfigs: Array<PublishConfiguration>) {\n  const packager = event.packager\n  const publishConfigs = await getPublishConfigsForUpdateInfo(packager, _publishConfigs, event.arch)\n  if (publishConfigs == null || publishConfigs.length === 0) {\n    return\n  }\n\n  const target = event.target!\n  let outDir = target.outDir\n  if (target.name.startsWith(\"nsis-\")) {\n    outDir = path.join(outDir, target.name)\n    await ensureDir(outDir)\n  }\n\n  for (const publishConfig of publishConfigs) {\n    const isGitHub = publishConfig.provider === \"github\"\n    if (!(publishConfig.provider === \"generic\" || publishConfig.provider === \"s3\" || isGitHub)) {\n      continue\n    }\n\n    const version = packager.appInfo.version\n    const channel = (<GenericServerOptions>publishConfig).channel || \"latest\"\n    if (packager.platform === Platform.MAC) {\n      const updateInfoFile = isGitHub ? path.join(outDir, \"github\", `${channel}-mac.json`) : path.join(outDir, `${channel}-mac.json`)\n      await (<any>outputJson)(updateInfoFile, <VersionInfo>{\n        version: version,\n        releaseDate: new Date().toISOString(),\n        url: computeDownloadUrl(publishConfig, packager.generateName2(\"zip\", \"mac\", isGitHub), packager),\n      }, {spaces: 2})\n\n      packager.info.dispatchArtifactCreated({\n        file: updateInfoFile,\n        arch: null,\n        packager: packager,\n        target: null,\n        publishConfig: publishConfig,\n      })\n    }\n    else {\n      await writeWindowsUpdateInfo(event, version, outDir, channel, publishConfigs)\n      break\n    }\n  }\n}\n\nasync function writeWindowsUpdateInfo(event: ArtifactCreated, version: string, outDir: any, channel: string, publishConfigs: Array<PublishConfiguration>): Promise<void> {\n  const packager = event.packager\n  const sha2 = await sha256(event.file!)\n  const updateInfoFile = path.join(outDir, `${channel}.yml`)\n  await writeFile(updateInfoFile, safeDump(<UpdateInfo>{\n    version: version,\n    releaseDate: new Date().toISOString(),\n    githubArtifactName: event.safeArtifactName,\n    path: path.basename(event.file!),\n    sha2: sha2,\n  }))\n\n  const githubPublishConfig = publishConfigs.find(it => it.provider === \"github\")\n  if (githubPublishConfig != null) {\n    // to preserve compatibility with old electron-updater (< 0.10.0), we upload file with path specific for GitHub\n    packager.info.dispatchArtifactCreated({\n      data: new Buffer(safeDump(<UpdateInfo>{\n        version: version,\n        path: event.safeArtifactName,\n        sha2: sha2,\n      })),\n      safeArtifactName: `${channel}.yml`,\n      packager: packager,\n      target: null,\n      publishConfig: githubPublishConfig,\n      arch: null,\n    })\n  }\n\n  const genericPublishConfig = publishConfigs.find(it => it.provider === \"generic\" || it.provider === \"s3\")\n  if (genericPublishConfig != null) {\n    packager.info.dispatchArtifactCreated({\n      file: updateInfoFile,\n      arch: null,\n      packager: packager,\n      target: null,\n      publishConfig: genericPublishConfig,\n    })\n  }\n}\n\nexport function createPublisher(context: PublishContext, version: string, publishConfig: PublishConfiguration, options: PublishOptions): Publisher | null {\n  const provider = publishConfig.provider\n  switch (provider) {\n    case \"github\":\n      return new GitHubPublisher(context, publishConfig, version, options)\n\n    case \"bintray\":\n      return new BintrayPublisher(context, publishConfig, version, options)\n    \n    case \"generic\":\n      return null\n\n    default:\n      const clazz = requireProviderClass(provider)\n      return clazz == null ? null : new clazz(context, publishConfig)\n  }\n}\n\nfunction requireProviderClass(provider: string): any | null {\n  switch (provider) {\n    case \"github\":\n      return GitHubPublisher\n\n    case \"bintray\":\n      return BintrayPublisher\n\n    case \"generic\":\n      return null\n\n    default:\n      return require(`electron-publisher-${provider}`).default\n  }\n}\n\nexport function computeDownloadUrl(publishConfig: PublishConfiguration, fileName: string | null, packager: PlatformPackager<any>) {\n  if (publishConfig.provider === \"generic\") {\n    const baseUrlString = (<GenericServerOptions>publishConfig).url\n    if (fileName == null) {\n      return baseUrlString\n    }\n\n    const baseUrl = url.parse(baseUrlString)\n    return url.format(Object.assign({}, baseUrl, {pathname: path.posix.resolve(baseUrl.pathname || \"/\", encodeURI(fileName))}))\n  }\n\n  let baseUrl\n  if (publishConfig.provider === \"s3\") {\n    baseUrl = s3Url((<S3Options>publishConfig))\n  }\n  else {\n    const gh = <GithubOptions>publishConfig\n    baseUrl = `${githubUrl(gh)}/${gh.owner}/${gh.repo}/releases/download/${gh.vPrefixedTagName === false ? \"\" : \"v\"}${packager.appInfo.version}`\n  }\n\n  if (fileName == null) {\n    return baseUrl\n  }\n  return `${baseUrl}/${encodeURI(fileName)}`\n}\n\nexport async function getPublishConfigs(packager: PlatformPackager<any>, targetSpecificOptions: PlatformSpecificBuildOptions | null | undefined, arch: Arch | null): Promise<Array<PublishConfiguration> | null> {\n  let publishers\n\n  // check build.nsis (target)\n  if (targetSpecificOptions != null) {\n    publishers = targetSpecificOptions.publish\n    // if explicitly set to null - do not publish\n    if (publishers === null) {\n      return null\n    }\n  }\n\n  // check build.win (platform)\n  if (publishers == null) {\n    publishers = packager.platformSpecificBuildOptions.publish\n    if (publishers === null) {\n      return null\n    }\n  }\n\n  if (publishers == null) {\n    publishers = packager.config.publish\n    if (publishers === null) {\n      return null\n    }\n  }\n\n  if (publishers == null) {\n    let serviceName: PublishProvider | null = null\n    if (!isEmptyOrSpaces(process.env.GH_TOKEN)) {\n      serviceName = \"github\"\n    }\n    else if (!isEmptyOrSpaces(process.env.BT_TOKEN)) {\n      serviceName = \"bintray\"\n    }\n\n    if (serviceName != null) {\n      debug(`Detect ${serviceName} as publish provider`)\n      return [(await getResolvedPublishConfig(packager, {provider: serviceName}, arch))!]\n    }\n  }\n\n  if (publishers == null) {\n    return []\n  }\n\n  debug(`Explicit publish provider: ${safeStringifyJson(publishers)}`)\n  return await (<Promise<Array<PublishConfiguration>>>BluebirdPromise.map(asArray(publishers), it => getResolvedPublishConfig(packager, typeof it === \"string\" ? {provider: it} : it, arch)))\n}\n\nfunction sha256(file: string) {\n  return new BluebirdPromise<string>((resolve, reject) => {\n    const hash = createHash(\"sha256\")\n    hash\n      .on(\"error\", reject)\n      .setEncoding(\"hex\")\n\n    createReadStream(file)\n      .on(\"error\", reject)\n      .on(\"end\", () => {\n        hash.end()\n        resolve(<string>hash.read())\n      })\n      .pipe(hash, {end: false})\n  })\n}\n\nfunction isSuitableWindowsTarget(target: Target) {\n  return target.name === \"nsis\" || target.name.startsWith(\"nsis-\")\n}\n\nfunction getCiTag() {\n  const tag = process.env.TRAVIS_TAG || process.env.APPVEYOR_REPO_TAG_NAME || process.env.CIRCLE_TAG || process.env.CI_BUILD_TAG\n  return tag != null && tag.length > 0 ? tag : null\n}\n\nfunction expandPublishConfig(options: any, packager: PlatformPackager<any>, arch: Arch | null): void {\n  for (const name of Object.keys(options)) {\n    const value = options[name]\n    if (typeof value === \"string\") {\n      const expanded = packager.expandMacro(value, arch)\n      if (expanded !== value) {\n        options[name] = expanded\n      }\n    }\n  }\n}\n\nasync function getResolvedPublishConfig(packager: PlatformPackager<any>, options: PublishConfiguration, arch: Arch | null, errorIfCannot: boolean = true): Promise<PublishConfiguration | null> {\n  options = Object.assign(Object.create(null), options)\n  expandPublishConfig(options, packager, arch)\n  \n  const provider = options.provider\n  if (provider === \"generic\") {\n    if ((<GenericServerOptions>options).url == null) {\n      throw new Error(`Please specify \"url\" for \"generic\" update server`)\n    }\n    return options\n  }\n\n  const providerClass = requireProviderClass(options.provider)\n  if (providerClass != null && providerClass.checkAndResolveOptions != null) {\n    await providerClass.checkAndResolveOptions(options)\n    return options\n  }\n  \n  const isGithub = provider === \"github\"\n  if (!isGithub && provider !== \"bintray\") {\n    return options\n  }\n  \n  let owner = options.owner\n  let project = isGithub ? (<GithubOptions>options).repo : (<BintrayOptions>options).package\n\n  if (isGithub && owner == null && project != null) {\n    const index = project.indexOf(\"/\")\n    if (index > 0) {\n      const repo = project\n      project = repo.substring(0, index)\n      owner = repo.substring(index + 1)\n    }\n  }\n  \n  async function getInfo() {\n    const info = await packager.info.repositoryInfo\n    if (info != null) {\n      return info\n    }\n\n    const message = `Cannot detect repository by .git/config. Please specify \"repository\" in the package.json (https://docs.npmjs.com/files/package.json#repository).\\nPlease see https://github.com/electron-userland/electron-builder/wiki/Publishing-Artifacts`\n    if (errorIfCannot) {\n      throw new Error(message)\n    }\n    else {\n      warn(message)\n      return null\n    }\n  }\n\n  if (!owner || !project) {\n    debug(`No owner or project for ${provider}, call getInfo: owner: ${owner}, project: ${project}`)\n    const info = await getInfo()\n    if (info == null) {\n      return null\n    }\n\n    if (!owner) {\n      owner = info.user\n    }\n    if (!project) {\n      project = info.project\n    }\n  }\n\n  if (isGithub) {\n    if (options.token != null && !(<GithubOptions>options).private) {\n      warn('\"token\" specified in the github publish options. It should be used only for [setFeedURL](module:electron-updater/out/AppUpdater.AppUpdater+setFeedURL).')\n    }\n    return Object.assign({owner, repo: project}, options)\n  }\n  else {\n    return Object.assign({owner, package: project}, options)\n  }\n}"
  ]
}
