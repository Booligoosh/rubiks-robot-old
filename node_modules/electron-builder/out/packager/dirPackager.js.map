{
  "version": 3,
  "file": "dirPackager.js",
  "sourceRoot": "",
  "sources": [
    "../../src/packager/dirPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { path7za } from \"7zip-bin\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { debug7zArgs, spawn } from \"electron-builder-util\"\nimport { copyDir } from \"electron-builder-util/out/fs\"\nimport { warn } from \"electron-builder-util/out/log\"\nimport { chmod, emptyDir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { PlatformPackager } from \"../platformPackager\"\n\nconst downloadElectron: (options: any) => Promise<any> = BluebirdPromise.promisify(require(\"electron-download-tf\"))\n\nfunction createDownloadOpts(opts: any, platform: string, arch: string, electronVersion: string) {\n  if (opts.download != null) {\n    warn(`\"build.download is deprecated — please use build.electronDownload instead`)\n  }\n\n  const downloadOpts = Object.assign({\n    cache: opts.cache,\n    strictSSL: opts[\"strict-ssl\"]\n  }, opts.electronDownload || opts.download)\n\n  subOptionWarning(downloadOpts, \"download\", \"platform\", platform)\n  subOptionWarning(downloadOpts, \"download\", \"arch\", arch)\n  subOptionWarning(downloadOpts, \"download\", \"version\", electronVersion)\n  return downloadOpts\n}\n\nfunction subOptionWarning (properties: any, optionName: any, parameter: any, value: any) {\n  if (properties.hasOwnProperty(parameter)) {\n    warn(`${optionName}.${parameter} will be inferred from the main options`)\n  }\n  properties[parameter] = value\n}\n\nexport function unpackElectron(packager: PlatformPackager<any>, out: string, platform: string, arch: string, version: string) {\n  return unpack(packager, out, platform, createDownloadOpts(packager.config, platform, arch, version))\n}\n\nexport function unpackMuon(packager: PlatformPackager<any>, out: string, platform: string, arch: string, version: string) {\n  return unpack(packager, out, platform, Object.assign({\n    mirror: \"https://github.com/brave/muon/releases/download/v\",\n    customFilename: `brave-v${version}-${platform}-${arch}.zip`,\n    verifyChecksum: false,\n  }, createDownloadOpts(packager.config, platform, arch, version)))\n}\n\nasync function unpack(packager: PlatformPackager<any>, out: string, platform: string, options: any) {\n  const dist = packager.config.electronDist\n  if (dist == null) {\n    const zipPath = (await BluebirdPromise.all<any>([\n      downloadElectron(options),\n      emptyDir(out)\n    ]))[0]\n\n    await spawn(path7za, debug7zArgs(\"x\").concat(zipPath, `-o${out}`))\n  }\n  else {\n    await emptyDir(out)\n    await copyDir(path.resolve(packager.info.projectDir, dist, \"Electron.app\"), path.join(out, \"Electron.app\"))\n  }\n\n  if (platform === \"linux\") {\n    // https://github.com/electron-userland/electron-builder/issues/786\n    // fix dir permissions — opposite to extract-zip, 7za creates dir with no-access for other users, but dir must be readable for non-root users\n    await BluebirdPromise.all([\n      chmod(path.join(out, \"locales\"), \"0755\"),\n      chmod(path.join(out, \"resources\"), \"0755\")\n    ])\n  }\n}"
  ]
}
