{
  "version": 3,
  "file": "metadata.js",
  "sourceRoot": "",
  "sources": [
    "../src/metadata.ts"
  ],
  "names": [],
  "mappings": "",
  "sourcesContent": [
    "import { Arch, AsarOptions, AuthorMetadata, BeforeBuildContext, CompressionLevel, FileAssociation, FilePattern, MetadataDirectories, PlatformSpecificBuildOptions, Protocol, RepositoryInfo, Target } from \"electron-builder-core\"\nimport { Publish } from \"electron-builder-http/out/publishOptions\"\nimport { DebOptions, LinuxBuildOptions, SnapOptions } from \"./options/linuxOptions\"\nimport { DmgOptions, MacOptions, MasBuildOptions, PkgOptions } from \"./options/macOptions\"\nimport { AppXOptions, NsisOptions, NsisWebOptions, SquirrelWindowsOptions, WinBuildOptions } from \"./options/winOptions\"\nimport { PlatformPackager } from \"./platformPackager\"\n\n/**\n * Fields in the package.json\n * Some standard fields should be defined in the `package.json`.\n */\nexport interface Metadata {\n  readonly repository?: string | RepositoryInfo | null\n\n  readonly dependencies?: { [key: string]: string }\n\n  readonly version?: string\n\n  /**\n   * The application name.\n   * @required\n   */\n  readonly name?: string\n\n  readonly productName?: string | null\n\n  /**\n   * The application description.\n   */\n  readonly description?: string\n\n  readonly main?: string | null\n\n  readonly author?: AuthorMetadata\n\n  /**\n   * The url to the project [homepage](https://docs.npmjs.com/files/package.json#homepage) (NuGet Package `projectUrl` (optional) or Linux Package URL (required)).\n   * \n   * If not specified and your project repository is public on GitHub, it will be `https://github.com/${user}/${project}` by default.\n   */\n  readonly homepage?: string | null\n\n  /**\n   *linux-only.* The [license](https://docs.npmjs.com/files/package.json#license) name.\n   */\n  readonly license?: string | null\n\n  readonly build?: Config\n}\n\n/**\n * Configuration Options\n */\nexport interface Config extends PlatformSpecificBuildOptions {\n  /**\n   * The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n   * [Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported).\n   * \n   * Defaults to `com.electron.${name}`. It is strongly recommended that an explicit ID be set.\n   */\n  readonly appId?: string | null\n\n  /**\n   * The human-readable copyright line for the app. Defaults to `Copyright © year author`.\n   */\n  readonly copyright?: string | null\n  \n  /**\n   * As [name](#AppMetadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the [name property](https://docs.npmjs.com/files/package.json#name}).\n   */\n  readonly productName?: string | null\n\n  /**\n   * A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the [app directory](#MetadataDirectories-app), which specifies which files to include when copying files to create the package.\n   * @see [File Patterns](#file-patterns).\n   */\n  readonly files?: Array<string> | string | null\n\n  /**\n   * A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the project directory, when specified, copy the file or directory with matching names directly into the app's resources directory (`Contents/Resources` for MacOS, `resources` for Linux/Windows).\n   *\n   * Glob rules the same as for [files](#multiple-glob-patterns).\n   */\n  readonly extraResources?: Array<FilePattern | string> | FilePattern | string | null\n\n  /**\n   * The same as [extraResources](#Config-extraResources) but copy into the app's content directory (`Contents` for MacOS, root directory for Linux/Windows).\n   */\n  readonly extraFiles?: Array<FilePattern | string> | FilePattern | string | null\n\n  /**\n   * Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n   * \n   * Node modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#Config-asarUnpack) - please file issue if this doesn't work.\n   * @default true\n  */\n  readonly asar?: AsarOptions | boolean | null\n\n  /**\n   * A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.\n   */\n  readonly asarUnpack?: Array<string> | string | null\n\n  /**\n   * File associations.\n   */\n  readonly fileAssociations?: Array<FileAssociation> | FileAssociation\n\n  /**\n   * URL protocol schemes.\n   */\n  readonly protocols?: Array<Protocol> | Protocol\n  \n  /**\n   * The compression level. If you want to rapidly test build, `store` can reduce build time significantly.\n   * @default normal\n   */\n  readonly compression?: CompressionLevel | null\n\n  /**\n   * *programmatic API only* The function to be run after pack (but before pack into distributable format and sign). Promise must be returned.\n   */\n  readonly afterPack?: (context: AfterPackContext) => Promise<any> | null\n\n  /**\n   * *programmatic API only* The function to be run before dependencies are installed or rebuilt. Works when `npmRebuild` is set to `true`. Promise must be returned. Resolving to `false` will skip dependencies install or rebuild.\n   */\n  readonly beforeBuild?: (context: BeforeBuildContext) => Promise<any> | null\n\n  /**\n   * Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies (`npm rebuild`) before starting to package the app.\n   * @default true\n   */\n  readonly npmRebuild?: boolean\n\n  /**\n   * Whether to omit using [--build-from-source](https://github.com/mapbox/node-pre-gyp#options) flag when installing app native deps.\n   * @default false\n   */\n  readonly npmSkipBuildFromSource?: boolean\n\n  /**\n   * Additional command line arguments to use when installing app native deps.\n   */\n  readonly npmArgs?: Array<string> | string | null\n\n  /**\n   * Whether to execute `node-gyp rebuild` before starting to package the app.\n   * @default false\n   */\n  readonly nodeGypRebuild?: boolean\n\n  /**\n   * The path to custom Electron build (e.g. `~/electron/out/R`). Only macOS supported, file issue if need for Linux or Windows.\n   */\n  readonly electronDist?: string\n\n  /**\n   * The [electron-download](https://github.com/electron-userland/electron-download#usage) options.\n   */\n  readonly electronDownload?: any\n  \n  /**\n   * Array of option objects. Order is important — first item will be used as a default auto-update server.\n   * @see [Publish options](https://github.com/electron-userland/electron-builder/wiki/Publishing-Artifacts#publish-options).\n   */\n  readonly publish?: Publish\n\n  /**\n   * Whether to fail if application will be not signed (to prevent unsigned app if code signing configuration is not correct).\n   * @default false\n   */\n  readonly forceCodeSigning?: boolean\n\n  readonly directories?: MetadataDirectories | null\n\n  /**\n   * The version of electron you are packaging for. Defaults to version of `electron`, `electron-prebuilt` or `electron-prebuilt-compile` dependency.\n   */\n  readonly electronVersion?: string | null\n  \n  /**\n   * The version of muon you are packaging for.\n   */\n  readonly muonVersion?: string | null\n\n  /**\n   * The [artifact file name pattern](https://github.com/electron-userland/electron-builder/wiki/Options#artifact-file-name-pattern). Defaults to `${productName}-${version}.${ext}` (some target can have another defaults, see corresponding options).\n   * \n   * Currently supported only for `mas`, `pkg`, `dmg` and `nsis`.\n   */\n  readonly artifactName?: string | null\n\n  /**\n   * The build version. Maps to the `CFBundleVersion` on macOS, and `FileVersion` metadata property on Windows. Defaults to the `version`.\n   * If `TRAVIS_BUILD_NUMBER` or `APPVEYOR_BUILD_NUMBER` or `CIRCLE_BUILD_NUM` or `BUILD_NUMBER` or `bamboo.buildNumber` env defined, it will be used as a build version (`version.build_number`).\n   */\n  readonly buildVersion?: string | null\n  \n  /**\n   * Whether to use [electron-compile](http://github.com/electron/electron-compile) to compile app. Defaults to `true` if `electron-compile` in the dependencies. And `false` if in the `devDependencies` or doesn't specified.\n   */\n  readonly electronCompile?: boolean\n  \n  readonly mac?: MacOptions | null\n  readonly mas?: MasBuildOptions | null\n  readonly dmg?: DmgOptions | null\n  readonly pkg?: PkgOptions  | null\n\n  readonly win?: WinBuildOptions  | null\n  readonly nsis?: NsisOptions  | null\n  readonly nsisWeb?: NsisWebOptions  | null\n  readonly portable?: NsisOptions  | null\n  readonly appx?: AppXOptions  | null\n  readonly squirrelWindows?: SquirrelWindowsOptions  | null\n\n  readonly linux?: LinuxBuildOptions | null\n  readonly deb?: DebOptions | null\n  readonly snap?: SnapOptions | null\n  readonly appimage?: LinuxBuildOptions | null\n  readonly pacman?: LinuxBuildOptions | null\n  readonly rpm?: LinuxBuildOptions | null\n  readonly freebsd?: LinuxBuildOptions | null\n  readonly p5p?: LinuxBuildOptions | null\n  readonly apk?: LinuxBuildOptions | null\n  \n  /**\n   * @private\n   */\n  readonly icon?: string | null\n}\n\nexport interface AfterPackContext {\n  readonly appOutDir: string\n  readonly packager: PlatformPackager<any>\n  readonly electronPlatformName: string\n  readonly arch: Arch\n  readonly targets: Array<Target>\n}"
  ]
}
