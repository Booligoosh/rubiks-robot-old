{
  "version": 3,
  "file": "fileTransformer.js",
  "sourceRoot": "",
  "sources": [
    "../src/fileTransformer.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { debug } from \"electron-builder-util\"\nimport { deepAssign } from \"electron-builder-util/out/deepAssign\"\nimport { FileTransformer } from \"electron-builder-util/out/fs\"\nimport { warn } from \"electron-builder-util/out/log\"\nimport { readJson } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { BuildInfo } from \"./packagerApi\"\n\nexport function isElectronCompileUsed(info: BuildInfo): boolean {\n  if (info.config.electronCompile != null) {\n    return info.config.electronCompile\n  }\n  \n  // if in devDependencies - it means that babel is used for precompilation or for some reason user decided to not use electron-compile for production\n  const deps = info.metadata.dependencies\n  return deps != null && \"electron-compile\" in deps\n}\n\nexport async function createTransformer(srcDir: string, extraMetadata: any): Promise<FileTransformer> {\n  const mainPackageJson = path.join(srcDir, \"package.json\")\n\n  return file => {\n    if (file === mainPackageJson) {\n      return modifyMainPackageJson(file, extraMetadata)\n    }\n    else if (file.endsWith(\"/package.json\") && file.includes(\"/node_modules/\")) {\n      return readJson(file)\n        .then(it => cleanupPackageJson(it, false))\n        .catch(e => warn(e))\n    }\n    else {\n      return null\n    }\n  }\n}\n\nexport interface CompilerHost {\n  compile(file: string): any\n  \n  saveConfiguration(): Promise<any>\n}\n\nexport function createElectronCompilerHost(projectDir: string, cacheDir: string): Promise<CompilerHost> {\n  const electronCompilePath = path.join(projectDir, \"node_modules\", \"electron-compile\", \"lib\")\n  return require(path.join(electronCompilePath, \"config-parser\")).createCompilerHostFromProjectRoot(projectDir, cacheDir)\n}\n\nfunction cleanupPackageJson(data: any, isMain: boolean): any {\n  try {\n    let changed = false\n    for (const prop of Object.getOwnPropertyNames(data)) {\n      if (prop[0] === \"_\" || prop === \"dist\" || prop === \"gitHead\" || prop === \"keywords\" || prop === \"build\" || (isMain && prop === \"devDependencies\") || prop === \"scripts\") {\n        delete data[prop]\n        changed = true\n      }\n    }\n\n    if (changed) {\n      return JSON.stringify(data, null, 2)\n    }\n  }\n  catch (e) {\n    debug(e)\n  }\n\n  return null\n}\n\nasync function modifyMainPackageJson(file: string, extraMetadata: any) {\n  const mainPackageData = await readJson(file)\n  if (extraMetadata != null) {\n    deepAssign(mainPackageData, extraMetadata)\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/1212\n  const serializedDataIfChanged = cleanupPackageJson(mainPackageData, true)\n  if (serializedDataIfChanged != null) {\n    return serializedDataIfChanged\n  }\n  else if (extraMetadata != null) {\n    return JSON.stringify(mainPackageData, null, 2)\n  }\n  return null\n}"
  ]
}
