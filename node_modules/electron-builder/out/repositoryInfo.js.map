{
  "version": 3,
  "file": "repositoryInfo.js",
  "sourceRoot": "",
  "sources": [
    "../src/repositoryInfo.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;oEAeA,AAAK,WAAiC,AAAkB;AACtD,YAAI,AAAI,OAAkB,AAAI;AAC9B,YAAI,AAAC;AACH,AAAI,mBAAG,MAAM,AAAQ,8CAAC,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAM,QAAE,AAAQ,AAAC,WAAE,AAAM,AAAC,AACxE;AAAC,UACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,YAAI,AAAC,EAAC,AAAI,SAAK,AAAS,AAAC,WAAC,AAAC;AAChD,AAAM,uBAAC,AAAI,AACb;AAAC;AAED,kBAAM,AAAC,AACT;AAAC;AAED,cAAM,AAAI,OAAG,AAAI,KAAC,AAAK,MAAC,AAAO,AAAC;AAChC,cAAM,AAAC,IAAG,AAAI,KAAC,AAAO,QAAC,AAAmB,AAAC;AAC3C,AAAE,AAAC,YAAC,AAAC,MAAK,CAAC,AAAC,AAAC,GAAC,AAAC;AACb,gBAAI,AAAC,IAAG,AAAI,KAAC,AAAC,IAAG,AAAC,AAAC;AACnB,AAAE,AAAC,gBAAC,CAAC,AAAC,EAAC,AAAK,MAAC,AAAW,AAAC,AAAC,cAAC,AAAC;AAC1B,AAAC,oBAAG,AAAI,KAAC,AAAC,IAAG,AAAC,AAAC,AACjB;AAAC;AAED,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAK,MAAC,AAAW,AAAC,AAAC,cAAC,AAAC;AACzB,AAAM,uBAAC,AAAC,EAAC,AAAO,QAAC,AAAY,cAAE,AAAE,AAAC,AACpC;AAAC,AACH;AAAC;AACD,AAAM,eAAC,AAAI,AACb;AAAC;;;;;;;;qEAED,AAAK,WAAmB,AAAkB,YAAE,AAA4B;AACtE,AAAE,AAAC,YAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAM,mBAAC,AAAkB,uDAAC,OAAO,AAAI,SAAK,AAAQ,WAAG,AAAI,OAAG,AAAI,KAAC,AAAG,AAAC,AACvE;AAAC;AAED,YAAI,AAAG,MAAG,AAAO,QAAC,AAAG,IAAC,AAAgB;AACtC,AAAE,AAAC,YAAC,AAAG,OAAI,AAAI,AAAC,MAAC,AAAC;AAChB,kBAAM,AAAI,OAAkB,AAAO,QAAC,AAAG,IAAC,AAAqB,yBAAI,AAAO,QAAC,AAAG,IAAC,AAAuB;AACpG,kBAAM,AAAO,UAAkB,AAAO,QAAC,AAAG,IAAC,AAAqB,yBAAI,AAAO,QAAC,AAAG,IAAC,AAAuB;AACvG,AAAE,AAAC,gBAAC,AAAI,QAAI,AAAI,QAAI,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpC,AAAM;AACJ,AAAI,0BAAE,AAAI;AACV,AAAO,6BAAE,AAAO,AACjB,AACH;AAJS;AAIR;AAED,AAAG,kBAAG,MAAM,AAAsB,uBAAC,AAAU,AAAC,AAChD;AAAC;AAED,AAAM,eAAC,AAAG,OAAI,AAAI,OAAG,AAAI,OAAG,AAAkB,uDAAC,AAAG,AAAC,AACrD;AAAC;;;;;;;;;;;;;AA9DD,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AACrC,AAAO,AAAE,AAAO,AAAI,AAAkB,AAAQ,AAAM,AAAiB;;;;AACrE,AAAO,AAAK,AAAI,AAAM,AAAM,AAQ5B,AAAM;;;;2BAA4B,AAAkB,YAAE,AAAmB,UAAE,AAAsB;AAC/F,AAAM,WAAC,AAAQ,SAAC,AAAU,YAAkB,CAAC,AAAW,eAAI,AAAI,OAAG,AAAI,OAAG,AAAW,YAAC,AAAU,AAAC,AAAI,gBAAC,AAAQ,YAAI,AAAI,OAAG,AAAI,OAAG,AAAQ,SAAC,AAAU,AAAC,AAAC,AACvJ;AAAC",
  "sourcesContent": [
    "import { RepositoryInfo } from \"electron-builder-core\"\nimport { readFile } from \"fs-extra-p\"\nimport { fromUrl as parseRepositoryUrl, Info } from \"hosted-git-info\"\nimport * as path from \"path\"\nimport { Metadata } from \"./metadata\"\n\nexport interface RepositorySlug {\n  user: string\n  project: string\n}\n\nexport function getRepositoryInfo(projectDir: string, metadata?: Metadata, devMetadata?: Metadata): Promise<Info | null> {\n  return _getInfo(projectDir, <RepositoryInfo>(devMetadata == null ? null : devMetadata.repository) || (metadata == null ? null : metadata.repository))\n}\n\nasync function getGitUrlFromGitConfig(projectDir: string): Promise<string | null> {\n  let data: string | null = null\n  try {\n    data = await readFile(path.join(projectDir, \".git\", \"config\"), \"utf8\")\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\" || e.code === \"ENOTDIR\") {\n      return null\n    }\n\n    throw e\n  }\n\n  const conf = data.split(/\\r?\\n/)\n  const i = conf.indexOf('[remote \"origin\"]')\n  if (i !== -1) {\n    let u = conf[i + 1]\n    if (!u.match(/^\\s*url =/)) {\n      u = conf[i + 2]\n    }\n\n    if (u.match(/^\\s*url =/)) {\n      return u.replace(/^\\s*url = /, \"\")\n    }\n  }\n  return null\n}\n\nasync function _getInfo(projectDir: string, repo?: RepositoryInfo | null): Promise<RepositorySlug | null> {\n  if (repo != null) {\n    return parseRepositoryUrl(typeof repo === \"string\" ? repo : repo.url)\n  }\n\n  let url = process.env.TRAVIS_REPO_SLUG\n  if (url == null) {\n    const user: string | null = process.env.APPVEYOR_ACCOUNT_NAME || process.env.CIRCLE_PROJECT_USERNAME\n    const project: string | null = process.env.APPVEYOR_PROJECT_NAME || process.env.CIRCLE_PROJECT_REPONAME\n    if (user != null && project != null) {\n      return {\n        user: user,\n        project: project,\n      }\n    }\n\n    url = await getGitUrlFromGitConfig(projectDir)\n  }\n\n  return url == null ? null : parseRepositoryUrl(url)\n}"
  ]
}
