var fs = require("fs"),
    path = require("path"),
    jszip = require("jszip"),
    q = require('Q');

function zipPath(rootDir, saveTo) {
    var zip = new jszip();
    rootDir = path.resolve(rootDir);
    function recurse(fullPath, parentZip, isRoot) {
        var stat = fs.statSync(fullPath);
        var dir = path.dirname(fullPath);
        var file = path.basename(fullPath);
        if (stat.isDirectory()) {
            var folderZip;
            if (isRoot) {
                folderZip = parentZip;
            } else {
                folderZip = parentZip.folder(file);
            }
            var files = fs.readdirSync(fullPath);
            var count = files.length;
            files.forEach(function (file) {
                var filePath = path.resolve(fullPath, file);
                recurse(filePath, folderZip, false);
            });
        } else {
            var data = fs.readFileSync(fullPath, 'binary');
            //console.log(fullPath);
            parentZip.file(file, data);
        }
    }
    recurse(rootDir, zip, true);
    fs.writeFileSync(saveTo, zip.generate({ type: 'nodebuffer', compression: 'DEFLATE', compressionOptions: { level: 9 }, streamFiles: false }));
    return path.resolve(saveTo);
}

exports.zip = zipPath;