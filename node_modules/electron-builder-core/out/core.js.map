{
  "version": 3,
  "file": "core.js",
  "sourceRoot": "",
  "sources": [
    "../src/core.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Publish } from \"electron-builder-http/out/publishOptions\"\n\nexport enum Arch {\n  ia32, x64, armv7l\n}\n\nexport type ArchType = \"x64\" | \"ia32\" | \"armv7l\"\n\nexport function getArchSuffix(arch: Arch): string {\n  return arch === Arch.x64 ? \"\" : `-${Arch[arch]}`\n}\n\nexport type TargetConfigType = Array<string | TargetConfig> | string | TargetConfig | null\n\nexport interface TargetConfig {\n  /**\n   * The target name. e.g. `snap`.\n   */\n  readonly target: string\n\n  /**\n   * The arch or list of archs.\n   */\n  readonly arch?: Array<\"x64\" | \"ia32\" | \"armv7l\"> | string\n}\n\nexport function toLinuxArchString(arch: Arch) {\n  return arch === Arch.ia32 ? \"i386\" : (arch === Arch.x64 ? \"amd64\" : \"armv7l\")\n}\n\nexport function archFromString(name: string): Arch {\n  if (name === \"x64\") {\n    return Arch.x64\n  }\n  if (name === \"ia32\") {\n    return Arch.ia32\n  }\n  if (name === \"armv7l\") {\n    return Arch.armv7l\n  }\n\n  throw new Error(`Unsupported arch ${name}`)\n}\n\nexport class Platform {\n  static MAC = new Platform(\"mac\", \"mac\", \"darwin\")\n  static LINUX = new Platform(\"linux\", \"linux\", \"linux\")\n  static WINDOWS = new Platform(\"windows\", \"win\", \"win32\")\n\n  // deprecated\n  //noinspection JSUnusedGlobalSymbols\n  static OSX = Platform.MAC\n\n  constructor(public name: string, public buildConfigurationKey: string, public nodeName: string) {\n  }\n\n  toString() {\n    return this.name\n  }\n\n  createTarget(type?: string | Array<string> | null, ...archs: Array<Arch>): Map<Platform, Map<Arch, Array<string>>> {\n    if (type == null && (archs == null || archs.length === 0)) {\n      return new Map([[this, new Map()]])\n    }\n\n    const archToType = new Map()\n    if (this === Platform.MAC) {\n      archs = [Arch.x64]\n    }\n\n    for (const arch of (archs == null || archs.length === 0 ? [archFromString(process.arch)] : archs)) {\n      archToType.set(arch, type == null ? [] : (Array.isArray(type) ? type : [type]))\n    }\n    return new Map([[this, archToType]])\n  }\n\n  static current(): Platform {\n    return Platform.fromString(process.platform)\n  }\n\n  static fromString(name: string): Platform {\n    name = name.toLowerCase()\n    switch (name) {\n      case Platform.MAC.nodeName:\n      case Platform.MAC.name:\n        return Platform.MAC\n\n      case Platform.WINDOWS.nodeName:\n      case Platform.WINDOWS.name:\n      case Platform.WINDOWS.buildConfigurationKey:\n        return Platform.WINDOWS\n\n      case Platform.LINUX.nodeName:\n        return Platform.LINUX\n\n      default:\n        throw new Error(`Unknown platform: ${name}`)\n    }\n  }\n}\n\nexport abstract class Target {\n  abstract readonly outDir: string\n  abstract readonly options: TargetSpecificOptions | null | undefined\n\n  constructor(readonly name: string, readonly isAsyncSupported: boolean = true) {\n  }\n\n  abstract build(appOutDir: string, arch: Arch): Promise<any>\n\n  finishBuild(): Promise<any> {\n    return Promise.resolve()\n  }\n}\n\nexport interface TargetSpecificOptions {\n  /**\n   The [artifact file name pattern](https://github.com/electron-userland/electron-builder/wiki/Options#artifact-file-name-pattern).\n   */\n  readonly artifactName?: string | null\n\n  readonly forceCodeSigning?: boolean\n  \n  readonly publish?: Publish\n}\n\nexport interface PlatformSpecificBuildOptions extends TargetSpecificOptions {\n  readonly files?: Array<string> | string | null\n  readonly extraFiles?: Array<FilePattern | string> | FilePattern | string | null\n  readonly extraResources?: Array<FilePattern | string> | FilePattern | string | null\n\n  readonly asarUnpack?: Array<string> | string | null\n\n  readonly asar?: AsarOptions | boolean | null\n\n  readonly target?: Array<string | TargetConfig> | string | TargetConfig | null\n\n  readonly icon?: string | null\n\n  readonly fileAssociations?: Array<FileAssociation> | FileAssociation\n}\n\nexport const DEFAULT_TARGET = \"default\"\nexport const DIR_TARGET = \"dir\"\n\nexport interface AuthorMetadata {\n  readonly name: string\n  readonly email?: string\n}\n\nexport type CompressionLevel = \"store\" | \"normal\" | \"maximum\"\n\nexport interface RepositoryInfo {\n  readonly url: string\n}\n\nexport interface FilePattern {\n  from?: string\n  to?: string\n  filter?: Array<string> | string\n}\n\nexport interface AsarOptions {\n  smartUnpack?: boolean\n\n  ordering?: string | null\n}\n\nexport interface BeforeBuildContext {\n  readonly appDir: string\n  readonly electronVersion: string\n  readonly platform: Platform\n  readonly arch: string\n}\n\n/**\n * File associations.\n * \n * macOS (corresponds to [CFBundleDocumentTypes](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685)) and NSIS only.\n * \n * On Windows works only if [nsis.perMachine](https://github.com/electron-userland/electron-builder/wiki/Options#NsisOptions-perMachine) is set to `true`.\n */\nexport interface FileAssociation {\n  /**\n   * The extension (minus the leading period). e.g. `png`.\n   */\n  readonly ext: string | Array<string>\n\n  /**\n   * The name. e.g. `PNG`. Defaults to `ext`.\n   */\n  readonly name?: string | null\n\n  /**\n   * *windows-only.* The description.\n   */\n  readonly description?: string | null\n\n  /**\n   * The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n   */\n  readonly icon?: string | null\n\n  /**\n   * *macOS-only* The app’s role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Corresponds to `CFBundleTypeRole`.\n   * @default Editor\n   */\n  readonly role?: string\n\n  /**\n   * *macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`.\n   */\n  readonly isPackage?: boolean\n}\n\n/**\n * URL Protocol Schemes. Protocols to associate the app with. macOS only.\n * \n * Please note — on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos).\n */\nexport interface Protocol {\n  /**\n   * The name. e.g. `IRC server URL`.\n   */\n  readonly name: string\n\n  /**\n   * *macOS-only* The app’s role with respect to the type. \n   * @default Editor\n   */\n  readonly role?: \"Editor\" | \"Viewer\" | \"Shell\" | \"None\"\n\n  /**\n   * The schemes. e.g. `[\"irc\", \"ircs\"]`.\n  */\n  readonly schemes: Array<string>\n}\n\n/**\n * `directories`\n */\nexport interface MetadataDirectories {\n  /**\n   * The path to build resources.\n   * @default build\n   */\n  readonly buildResources?: string | null\n\n  /**\n   * The output directory.\n   * @default dist\n   */\n  readonly output?: string | null\n\n  /**\n   * The application directory (containing the application package.json), defaults to `app`, `www` or working directory.\n   */\n  readonly app?: string | null\n}\n\nexport interface SourceRepositoryInfo {\n  type: string\n  domain: string\n  user: string\n  project: string\n}"
  ]
}
